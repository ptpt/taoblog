// Generated by CoffeeScript 1.6.2
(function() {
    var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    define("taoblog/admin/1.0.0/drafts-debug", [ "$-debug", "./toolbar-debug", "./dom-debug", "./browser-debug", "./utils-debug" ], function(require, exports, module) {
        var $, Browser, DraftBrowser, Toolbar, Utils, dom, setupDrafts, _ref;
        $ = require("$-debug");
        Toolbar = require("./toolbar-debug");
        Browser = require("./browser-debug");
        Utils = require("./utils-debug");
        dom = require("./dom-debug");
        DraftBrowser = function(_super) {
            __extends(DraftBrowser, _super);
            function DraftBrowser() {
                _ref = DraftBrowser.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            DraftBrowser.prototype.showDate = function() {
                var now;
                now = new Date();
                return $(this.items).find("TD.draft-date > time").each(function() {
                    var date;
                    date = new Date($(this).attr("datetime"));
                    return $(this).text(Utils.getTimeAgo(date));
                });
            };
            DraftBrowser.prototype.makeDraftItem = function(draft) {
                return dom([ "tr", {
                    "class": "item",
                    "data-id": draft.id
                }, [ "td", {
                    "class": "draft-title"
                }, Utils.truncate(draft.title, 64) ], [ "td", {
                    "class": "draft-text"
                }, Utils.truncate(draft.text, 64) ], [ "td", {
                    "class": "draft-date"
                }, [ "time", {
                    datetime: draft.saved_at + "Z"
                }, Utils.getTimeAgo(draft.saved_at) ] ] ]);
            };
            DraftBrowser.prototype.setDrafts = function(drafts) {
                var draft, _i, _len;
                this.tbody.empty();
                for (_i = 0, _len = drafts.length; _i < _len; _i++) {
                    draft = drafts[_i];
                    this.tbody.append(this.makeDraftItem(draft));
                }
                return this.reload();
            };
            DraftBrowser.prototype.appenddrafts = function(drafts) {
                var draft, _i, _len;
                for (_i = 0, _len = drafts.length; _i < _len; _i++) {
                    draft = drafts[_i];
                    this.tbody.append(this.makeDraftItem(draft));
                }
                return this.reload();
            };
            DraftBrowser.prototype.removeSelections = function(callback) {
                var browser, length, removedCount;
                removedCount = 0;
                length = this.getSelections().length;
                browser = this;
                return this.getSelections().fadeOut("fast", function() {
                    $(this).remove();
                    removedCount++;
                    if (removedCount >= length) {
                        browser.reload();
                        return typeof callback === "function" ? callback() : void 0;
                    }
                });
            };
            return DraftBrowser;
        }(Browser);
        return setupDrafts = function() {
            var browser, showToolbar, toolbar;
            browser = new DraftBrowser("TABLE.browser");
            toolbar = new Toolbar("#toolbar");
            browser.bind("dblclick", function() {
                return window.location = "/draft/" + $(this).data("id") + "/edit";
            });
            browser.bind("click", function() {
                return showToolbar();
            });
            showToolbar = function() {
                toolbar.hideAllMenus();
                toolbar.showMenu("new-post");
                if (browser.getSelections().length > 0) {
                    return toolbar.showMenu("delete-draft");
                } else {
                    return toolbar.hideMenu("delete-draft");
                }
            };
            $("html").click(function(e) {
                if (browser.items.find(e.target).length === 0 && $(toolbar.selector).find(e.target).length === 0) {
                    browser.clearSelections();
                    return showToolbar();
                }
            });
            return function(browser) {
                var li;
                li = toolbar.addMenu("new-post", [ "li", [ "a", {
                    href: "/admin/compose"
                }, "New Post" ] ]);
                li = toolbar.addMenu("delete-draft", [ "li", [ "a", {
                    href: "#"
                }, "Delete" ] ]);
                toolbar.hideMenu("delete-draft");
                $("a", li).click(function(event) {
                    var item;
                    event.preventDefault();
                    return $.ajax({
                        url: "/api/drafts/?bulk=" + encodeURIComponent(function() {
                            var _i, _len, _ref1, _results;
                            _ref1 = browser.getSelections();
                            _results = [];
                            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                                item = _ref1[_i];
                                _results.push($(item).data("id"));
                            }
                            return _results;
                        }().join(",")),
                        type: "DELETE",
                        dataType: "json",
                        success: function(data) {
                            var count;
                            count = browser.getSelections().length;
                            return browser.removeSelections(function() {
                                return Utils.flash("" + count + " " + (count === 1 ? "draft" : "drafts") + " has been deleted");
                            });
                        },
                        error: function() {
                            return Utils.flash("failed to delete selected drafts", "error");
                        }
                    });
                });
                return browser.showDate();
            }(browser);
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    var __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    };
    define("taoblog/admin/1.0.0/toolbar-debug", [ "$-debug", "./dom-debug" ], function(require, exports, module) {
        var $, Toolbar, makeDom;
        $ = require("$-debug");
        makeDom = require("./dom-debug");
        return Toolbar = function() {
            function Toolbar(selector) {
                this.addMenu = __bind(this.addMenu, this);
                this.selector = selector;
                this.menus = {};
            }
            Toolbar.prototype.addMenu = function(id, menu) {
                var dom;
                if (!(id in this.menus)) {
                    dom = makeDom(menu);
                    this.menus[id] = dom;
                    $(this.selector).append(dom);
                } else {
                    dom = this.menus[id];
                }
                return dom;
            };
            Toolbar.prototype.removeAll = function() {
                return $(this.selector).remove();
            };
            Toolbar.prototype.removeMenu = function(id) {
                $(this.menus[id]).remove();
                return delete this.menus[id];
            };
            Toolbar.prototype.hideMenu = function(id) {
                return $(this.menus[id]).hide();
            };
            Toolbar.prototype.showMenu = function(id) {
                return $(this.menus[id]).show();
            };
            Toolbar.prototype.hideAllMenus = function() {
                var id, menu, _ref, _results;
                _ref = this.menus;
                _results = [];
                for (id in _ref) {
                    menu = _ref[id];
                    _results.push($(menu).hide());
                }
                return _results;
            };
            Toolbar.prototype.showAllMenus = function() {
                var id, menu, _ref, _results;
                _ref = this.menus;
                _results = [];
                for (id in _ref) {
                    menu = _ref[id];
                    _results.push($(menu).show());
                }
                return _results;
            };
            Toolbar.prototype.empty = function() {
                $(this.selector).empty();
                return this.menus = {};
            };
            return Toolbar;
        }();
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    define("taoblog/admin/1.0.0/dom-debug", [], function(require, exports, module) {
        var makeDom;
        return makeDom = function(tree) {
            var child, element, key, node, value, _i, _len, _ref;
            if (tree.length === 0) {
                return null;
            }
            if (tree[0] instanceof HTMLElement) {
                element = tree[0];
            } else {
                element = document.createElement(tree[0]);
            }
            _ref = tree.slice(1);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                node = _ref[_i];
                if (toString.call(node) === "[object String]") {
                    element.appendChild(document.createTextNode(node));
                } else if (node instanceof Text) {
                    element.appendChild(node);
                } else if (Array.isArray(node)) {
                    child = makeDom(node);
                    if (child != null) {
                        element.appendChild(child);
                    }
                } else if (node instanceof Attr) {
                    element.setAttributeNode(node);
                } else if (node === Object(node)) {
                    for (key in node) {
                        value = node[key];
                        element.setAttribute(key, value);
                    }
                }
            }
            return element;
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    define("taoblog/admin/1.0.0/browser-debug", [ "$-debug" ], function(require, exports, module) {
        var $, Browser;
        $ = require("$-debug");
        return Browser = function() {
            function Browser(selector) {
                var browser;
                browser = this;
                this.selectedClass = "selected";
                this.tbody = $(selector).children("TBODY");
                this.items = this.tbody.children("TR.item");
                this.lastSelectedRow = 0;
                this.selector = selector;
                this.events = [];
                this.bind("click", function(event, row) {
                    var r, _i, _ref;
                    if (event.shiftKey) {
                        for (r = _i = row, _ref = browser.lastSelectedRow; row <= _ref ? _i <= _ref : _i >= _ref; r = row <= _ref ? ++_i : --_i) {
                            browser.select(r);
                        }
                    } else if (event.ctrlKey) {
                        browser.toggleSelection(row);
                    } else {
                        browser.clearSelections();
                        browser.select(row);
                    }
                    return browser.lastSelectedRow = row;
                });
            }
            Browser.prototype.select = function(row) {
                if (!this.isSelected(row)) {
                    return this.items.eq(row).addClass(this.selectedClass);
                }
            };
            Browser.prototype.unselect = function(row) {
                if (this.isSelected(row)) {
                    return this.items.eq(row).removeClass(this.selectedClass);
                }
            };
            Browser.prototype.clearSelections = function() {
                var i, _i, _ref, _results;
                _results = [];
                for (i = _i = 0, _ref = this.items.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    _results.push(this.unselect(i));
                }
                return _results;
            };
            Browser.prototype.isSelected = function(row) {
                return this.items.eq(row).hasClass(this.selectedClass);
            };
            Browser.prototype.toggleSelection = function(row) {
                if (this.isSelected(row)) {
                    return this.unselect(row);
                } else {
                    return this.select(row);
                }
            };
            Browser.prototype.getSelections = function() {
                return this.items.filter("." + this.selectedClass);
            };
            Browser.prototype.selectAll = function() {
                return this.items.addClass(selectedClass);
            };
            Browser.prototype.bind = function(type, handler) {
                this.events.push({
                    type: type,
                    handler: handler
                });
                return this.items.each(function(row) {
                    return $(this).bind(type, function(event) {
                        return handler.apply(this, [ event, row ]);
                    });
                });
            };
            Browser.prototype.rebind = function() {
                var event, events, _i, _len, _results;
                events = this.events;
                this.events = [];
                _results = [];
                for (_i = 0, _len = events.length; _i < _len; _i++) {
                    event = events[_i];
                    _results.push(this.bind(event.type, event.handler));
                }
                return _results;
            };
            Browser.prototype.reload = function() {
                this.items = this.tbody.children("TR.item");
                this.lastSelectedRow = 0;
                this.items.unbind();
                return this.rebind();
            };
            return Browser;
        }();
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    define("taoblog/admin/1.0.0/utils-debug", [ "$-debug", "./dom-debug" ], function(require, exports, module) {
        var $, dom, flash, getTimeAgo, truncate;
        $ = require("$-debug");
        dom = require("./dom-debug");
        getTimeAgo = function(date) {
            var days, hours, mins, now, secs;
            now = new Date();
            secs = Math.floor((now - date) / 1e3);
            if (secs === 0) {
                return "just now";
            }
            mins = Math.floor(secs / 60);
            if (mins === 0) {
                return "" + secs + " " + (secs === 1 ? "second" : "seconds") + " ago";
            }
            hours = Math.floor(mins / 60);
            if (hours === 0) {
                return "" + mins + " " + (mins === 1 ? "minute" : "minutes") + " ago";
            }
            days = Math.floor(hours / 24);
            if (days === 0) {
                return "" + hours + " " + (hours === 1 ? "hour" : "hours") + " ago";
            } else if (days > 30) {
                return date.toDateString();
            } else {
                return "" + days + " " + (days === 1 ? "day" : "days") + " ago";
            }
        };
        truncate = function(text, length, killwords, end) {
            var index, whitespace, _i, _ref, _ref1;
            if (length == null) {
                length = 255;
            }
            if (killwords == null) {
                killwords = false;
            }
            if (end == null) {
                end = "...";
            }
            console.log(text);
            if (text.length <= length) {
                return text;
            }
            if (killwords) {
                return text.slice(0, +(length - 1) + 1 || 9e9) + end;
            }
            for (index = _i = length, _ref = length / 2; length <= _ref ? _i <= _ref : _i >= _ref; index = length <= _ref ? ++_i : --_i) {
                if ((_ref1 = text[index]) === "\n" || _ref1 === "	" || _ref1 === " ") {
                    whitespace = true;
                } else if (whitespace) {
                    return text.slice(0, +(index - 1) + 1 || 9e9) + end;
                }
            }
            return text.slice(0, +(index - 1) + 1 || 9e9) + end;
        };
        flash = function(message, category) {
            var item;
            if (category == null) {
                category = "success";
            }
            item = dom([ "p", {
                "class": category
            }, message ]);
            $("#flash").append(item);
            $(item).hide();
            return $(item).fadeIn("fast").delay(category === "success" ? 3e3 : 6e3).fadeOut("slow", function() {
                return $(this).remove();
            });
        };
        return {
            getTimeAgo: getTimeAgo,
            truncate: truncate,
            flash: flash
        };
    });
}).call(this);
