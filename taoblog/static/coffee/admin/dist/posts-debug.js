// Generated by CoffeeScript 1.6.2
(function() {
    var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    define("taoblog/admin/1.0.0/posts-debug", [ "$-debug", "Uri-debug", "./browser-debug", "./toolbar-debug", "./dom-debug", "./utils-debug" ], function(require, exports, module) {
        var $, Browser, DRAFT_IMG_SRC, PRIVATE, PRIVATE_IMG_SRC, PUBLIC, PostBrowser, TRASH, Toolbar, Uri, Utils, dom, setupPosts, _ref;
        $ = require("$-debug");
        Uri = require("Uri-debug");
        Browser = require("./browser-debug");
        Toolbar = require("./toolbar-debug");
        dom = require("./dom-debug");
        Utils = require("./utils-debug");
        PUBLIC = 0;
        PRIVATE = 1;
        TRASH = 2;
        PRIVATE_IMG_SRC = "/static/img/eye-blocked.png";
        DRAFT_IMG_SRC = "/static/img/pencil3.png";
        PostBrowser = function(_super) {
            __extends(PostBrowser, _super);
            function PostBrowser() {
                _ref = PostBrowser.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            PostBrowser.prototype.showDate = function(getTime) {
                var now;
                now = new Date();
                return $(this.items).find("TD.date > time").each(function() {
                    var date;
                    date = new Date($(this).attr("datetime"));
                    return $(this).text(getTime(date));
                });
            };
            PostBrowser.prototype.makePostItem = function(post) {
                var draftIcon, statusIcon;
                draftIcon = post.draft ? [ "img", {
                    "class": "draft",
                    src: DRAFT_IMG_SRC
                } ] : null;
                statusIcon = post.status === PRIVATE ? [ "img", {
                    "class": "private",
                    src: PRIVATE_IMG_SRC
                } ] : null;
                return dom([ "tr", {
                    "class": "item",
                    "data-id": post.id,
                    "data-status": post.status
                }, [ "td", {
                    "class": "title"
                }, Utils.truncate(post.title, 64), draftIcon, statusIcon ], [ "td", {
                    "class": "tags"
                }, post.tags.join(",") ], [ "td", {
                    "class": "date"
                }, [ "time", {
                    datetime: post.created_at + "Z"
                }, Utils.getTimeAgo(new Date(post.created_at)) ] ] ]);
            };
            PostBrowser.prototype.setPosts = function(posts) {
                var post, _i, _len;
                this.tbody.empty();
                for (_i = 0, _len = posts.length; _i < _len; _i++) {
                    post = posts[_i];
                    this.tbody.append(this.makePostItem(post));
                }
                return this.reload();
            };
            PostBrowser.prototype.appendPosts = function(posts) {
                var post, _i, _len;
                for (_i = 0, _len = posts.length; _i < _len; _i++) {
                    post = posts[_i];
                    this.tbody.append(this.makePostItem(post));
                }
                return this.reload();
            };
            PostBrowser.prototype.removeSelections = function(callback) {
                var browser, length, removedCount;
                removedCount = 0;
                length = this.getSelections().length;
                browser = this;
                return this.getSelections().fadeOut("fast", function() {
                    $(this).remove();
                    removedCount++;
                    if (removedCount >= length) {
                        browser.reload();
                        return typeof callback === "function" ? callback() : void 0;
                    }
                });
            };
            PostBrowser.prototype.removeAll = function(callback) {
                var browser, length, removedCount;
                removedCount = 0;
                length = this.items.length;
                browser = this;
                return this.items.fadeOut("fast", function() {
                    $(this).remove();
                    removedCount++;
                    if (removedCount >= length) {
                        browser.reload();
                        return typeof callback === "function" ? callback() : void 0;
                    }
                });
            };
            PostBrowser.prototype.markSelectedPostsAs = function(status) {
                var img, item, postItems, _i, _len, _results;
                postItems = this.getSelections();
                if (status === "private") {
                    postItems.data("status", PRIVATE);
                } else if (status === "public") {
                    postItems.data("status", PUBLIC);
                } else if (status === "trash") {
                    postItems.data("status", TRASH);
                }
                _results = [];
                for (_i = 0, _len = postItems.length; _i < _len; _i++) {
                    item = postItems[_i];
                    img = $(item).find("TD.title > IMG.private");
                    if (status === "private") {
                        if (img.length === 0) {
                            _results.push($(item).children("TD.title").append(dom([ "img", {
                                "class": "private",
                                src: PRIVATE_IMG_SRC
                            } ])));
                        } else {
                            _results.push(void 0);
                        }
                    } else if (status === "public") {
                        if (img.length > 0) {
                            _results.push(img.remove());
                        } else {
                            _results.push(void 0);
                        }
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            };
            PostBrowser.prototype.countSelectionsByStatus = function() {
                var item, privateItems, publicItems, trashItems, _i, _len, _ref1;
                publicItems = [];
                privateItems = [];
                trashItems = [];
                _ref1 = this.getSelections();
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    item = _ref1[_i];
                    if ($(item).data("status") === PUBLIC) {
                        publicItems.push(item);
                    } else if ($(item).data("status") === PRIVATE) {
                        privateItems.push(item);
                    } else if ($(item).data("status") === TRASH) {
                        trashItems.push(item);
                    }
                }
                return [ publicItems, privateItems, trashItems ];
            };
            return PostBrowser;
        }(Browser);
        setupPosts = function() {
            var browser, clearTrash, complementBrowser, deleteSelectedPosts, getApiPath, markSelectedPostsAs, showToolbar, toolbar;
            toolbar = new Toolbar("#toolbar");
            browser = new PostBrowser("TABLE.browser");
            getApiPath = function(offset, limit, currentStatus) {
                var uri;
                if (currentStatus == null) {
                    currentStatus = $(browser.selector).data("status");
                }
                uri = new Uri(window.location.href);
                if (offset != null) {
                    uri.addQueryParam("offset", encodeURIComponent(offset));
                }
                if (limit != null) {
                    uri.addQueryParam("limit", encodeURIComponent(limit));
                }
                if (currentStatus != null) {
                    uri.addQueryParam("status", encodeURIComponent(currentStatus));
                }
                uri.addQueryParam("meta", true);
                return "/api/posts/" + uri.query();
            };
            clearTrash = function() {
                return $.ajax({
                    url: "/api/posts/?status=trash",
                    type: "DELETE",
                    success: function(data) {
                        return browser.removeAll(function() {
                            return Utils.flash("" + data.response.total_posts + " " + (data.response.total_posts === 1 ? "post" : "posts") + " got deleted");
                        });
                    },
                    error: function() {
                        showToolbar();
                        return Utils.flash("failed to clear trash", "error");
                    }
                });
            };
            complementBrowser = function(currentStatus) {
                var limit, offset;
                limit = browser.getSelections().length;
                offset = browser.items.length - limit;
                return $.get(getApiPath(offset, limit, currentStatus), function(data) {
                    return browser.removeSelections(function() {
                        showToolbar();
                        browser.appendPosts(data.response.posts);
                        if (!data.response.more) {
                            return $("#more-posts").hide();
                        }
                    });
                }).error(function(data, text) {
                    browser.clearSelections();
                    showToolbar();
                    return Utils.flash("failed to get new posts", "error");
                });
            };
            deleteSelectedPosts = function(currentStatus) {
                var item, selections;
                selections = browser.getSelections();
                return $.ajax({
                    url: "/api/posts/?bulk=" + encodeURIComponent(function() {
                        var _i, _len, _ref1, _results;
                        _ref1 = browser.getSelections();
                        _results = [];
                        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                            item = _ref1[_i];
                            _results.push($(item).data("id"));
                        }
                        return _results;
                    }().join(",")),
                    type: "DELETE",
                    success: function(data) {
                        Utils.flash("" + selections.length + " " + (selections.length === 1 ? "post" : "posts") + " has been deleted");
                        return complementBrowser(currentStatus);
                    },
                    error: function() {
                        browser.clearSelections();
                        showToolbar();
                        return Utils.flash("failed to delete selected posts", "error");
                    }
                });
            };
            markSelectedPostsAs = function(currentStatus, status) {
                var action, item, passiveAction, selections;
                selections = browser.getSelections();
                if (!selections.length) {
                    return;
                }
                if (status === "public") {
                    action = "publish";
                    passiveAction = "published";
                } else if (status === "private") {
                    action = "hide";
                    passiveAction = "hidden";
                } else if (status === "trash") {
                    action = "trash";
                    passiveAction = "trashed";
                }
                return $.post("/api/posts/" + action, {
                    id: function() {
                        var _i, _len, _results;
                        _results = [];
                        for (_i = 0, _len = selections.length; _i < _len; _i++) {
                            item = selections[_i];
                            _results.push($(item).data("id"));
                        }
                        return _results;
                    }().join(",")
                }, function() {
                    if (currentStatus === "trash" || status === "trash") {
                        Utils.flash("" + selections.length + " " + (selections.length === 1 ? "post" : "posts") + " has been " + passiveAction);
                        return complementBrowser(currentStatus);
                    } else {
                        Utils.flash("" + selections.length + " " + (selections.length === 1 ? "post" : "posts") + " has been " + passiveAction);
                        browser.markSelectedPostsAs(status);
                        return showToolbar();
                    }
                }).error(function(data) {
                    browser.clearSelections();
                    return Utils.flash("failed to #{ action } selected posts", "error");
                });
            };
            browser.bind("click", function() {
                return showToolbar();
            });
            browser.bind("dblclick", function() {
                return window.location = "/post/" + $(this).data("id") + "/edit";
            });
            showToolbar = function() {
                var currentStatus, item, privateCount, publicCount, trashCount, _ref1;
                currentStatus = $(browser.selector).data("status");
                toolbar.hideAllMenus();
                toolbar.showMenu("new-post");
                _ref1 = function() {
                    var _i, _len, _ref1, _results;
                    _ref1 = browser.countSelectionsByStatus();
                    _results = [];
                    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                        item = _ref1[_i];
                        _results.push(item.length);
                    }
                    return _results;
                }(), publicCount = _ref1[0], privateCount = _ref1[1], trashCount = _ref1[2];
                if (publicCount + privateCount === 1) {
                    toolbar.showMenu("edit");
                } else {
                    toolbar.hideMenu("edit");
                }
                if (publicCount > 0 || privateCount > 0) {
                    toolbar.showMenu("trash");
                } else {
                    toolbar.hideMenu("trash");
                }
                if (publicCount > 0 || trashCount > 0) {
                    toolbar.showMenu("hide");
                } else {
                    toolbar.hideMenu("hide");
                }
                if (privateCount > 0 || trashCount > 0) {
                    toolbar.showMenu("publish");
                } else {
                    toolbar.hideMenu("publish");
                }
                if (trashCount > 0) {
                    toolbar.showMenu("delete");
                    return toolbar.hideMenu("delete-all");
                } else {
                    toolbar.hideMenu("delete");
                    if (currentStatus === "trash") {
                        return toolbar.showMenu("delete-all");
                    }
                }
            };
            $("html").click(function(e) {
                if (browser.items.find(e.target).length === 0 && $(toolbar.selector).find(e.target).length === 0) {
                    browser.clearSelections();
                    return showToolbar();
                }
            });
            $("#more-posts").click(function(event) {
                var offset, path;
                event.preventDefault();
                offset = browser.items.length;
                path = getApiPath(offset);
                return $.get(path, function(data) {
                    browser.appendPosts(data.response.posts);
                    if (!data.response.more) {
                        return $("#more-posts").hide();
                    }
                }).error(function() {
                    return Utils.flash("failed to get new posts", "error");
                });
            });
            return function() {
                var currentStatus, li;
                currentStatus = $(browser.selector).data("status");
                toolbar.addMenu("new-post", [ "li", [ "a", {
                    href: "/admin/compose"
                }, "New Post" ] ]);
                li = toolbar.addMenu("edit", [ "li", [ "a", {
                    href: "#"
                }, "Edit" ] ]);
                toolbar.hideMenu("edit");
                $("a", li).click(function(event) {
                    var id;
                    event.preventDefault();
                    id = $(browser.getSelections()).data("id");
                    return window.location = "/post/" + id + "/edit";
                });
                li = toolbar.addMenu("delete-all", [ "li", [ "a", {
                    href: "#"
                }, "Delete All" ] ]);
                toolbar.hideMenu("delete-all");
                $("a", li).click(function(event) {
                    event.preventDefault();
                    return clearTrash();
                });
                li = toolbar.addMenu("delete", [ "li", [ "a", {
                    href: "#"
                }, "Delete" ] ]);
                toolbar.hideMenu("delete");
                $("a", li).click(function(event) {
                    event.preventDefault();
                    return deleteSelectedPosts(currentStatus);
                });
                li = toolbar.addMenu("trash", [ "li", [ "a", {
                    href: "#",
                    "data-action": "/api/posts/trash"
                }, "Trash" ] ]);
                toolbar.hideMenu("trash");
                $("a", li).click(function(event) {
                    event.preventDefault();
                    return markSelectedPostsAs(currentStatus, "trash");
                });
                li = toolbar.addMenu("hide", [ "li", [ "a", {
                    href: "#",
                    "data-action": "/api/posts/hide"
                }, "Hide" ] ]);
                toolbar.hideMenu("hide");
                $("a", li).click(function(event) {
                    event.preventDefault();
                    return markSelectedPostsAs(currentStatus, "private");
                });
                li = toolbar.addMenu("publish", [ "li", [ "a", {
                    href: "#",
                    "data-action": "/api/posts/publish"
                }, "Publish" ] ]);
                toolbar.hideMenu("publish");
                $("a", li).click(function(event) {
                    event.preventDefault();
                    return markSelectedPostsAs(currentStatus, "public");
                });
                showToolbar();
                return browser.showDate(Utils.getTimeAgo);
            }();
        };
        return setupPosts;
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    define("taoblog/admin/1.0.0/browser-debug", [ "$-debug" ], function(require, exports, module) {
        var $, Browser;
        $ = require("$-debug");
        return Browser = function() {
            function Browser(selector) {
                var browser;
                browser = this;
                this.selectedClass = "selected";
                this.tbody = $(selector).children("TBODY");
                this.items = this.tbody.children("TR.item");
                this.lastSelectedRow = 0;
                this.selector = selector;
                this.events = [];
                this.bind("click", function(event, row) {
                    var r, _i, _ref;
                    if (event.shiftKey) {
                        for (r = _i = row, _ref = browser.lastSelectedRow; row <= _ref ? _i <= _ref : _i >= _ref; r = row <= _ref ? ++_i : --_i) {
                            browser.select(r);
                        }
                    } else if (event.ctrlKey) {
                        browser.toggleSelection(row);
                    } else {
                        browser.clearSelections();
                        browser.select(row);
                    }
                    return browser.lastSelectedRow = row;
                });
            }
            Browser.prototype.select = function(row) {
                if (!this.isSelected(row)) {
                    return this.items.eq(row).addClass(this.selectedClass);
                }
            };
            Browser.prototype.unselect = function(row) {
                if (this.isSelected(row)) {
                    return this.items.eq(row).removeClass(this.selectedClass);
                }
            };
            Browser.prototype.clearSelections = function() {
                var i, _i, _ref, _results;
                _results = [];
                for (i = _i = 0, _ref = this.items.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                    _results.push(this.unselect(i));
                }
                return _results;
            };
            Browser.prototype.isSelected = function(row) {
                return this.items.eq(row).hasClass(this.selectedClass);
            };
            Browser.prototype.toggleSelection = function(row) {
                if (this.isSelected(row)) {
                    return this.unselect(row);
                } else {
                    return this.select(row);
                }
            };
            Browser.prototype.getSelections = function() {
                return this.items.filter("." + this.selectedClass);
            };
            Browser.prototype.selectAll = function() {
                return this.items.addClass(selectedClass);
            };
            Browser.prototype.bind = function(type, handler) {
                this.events.push({
                    type: type,
                    handler: handler
                });
                return this.items.each(function(row) {
                    return $(this).bind(type, function(event) {
                        return handler.apply(this, [ event, row ]);
                    });
                });
            };
            Browser.prototype.rebind = function() {
                var event, events, _i, _len, _results;
                events = this.events;
                this.events = [];
                _results = [];
                for (_i = 0, _len = events.length; _i < _len; _i++) {
                    event = events[_i];
                    _results.push(this.bind(event.type, event.handler));
                }
                return _results;
            };
            Browser.prototype.reload = function() {
                this.items = this.tbody.children("TR.item");
                this.lastSelectedRow = 0;
                this.items.unbind();
                return this.rebind();
            };
            return Browser;
        }();
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    var __bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    };
    define("taoblog/admin/1.0.0/toolbar-debug", [ "$-debug", "./dom-debug" ], function(require, exports, module) {
        var $, Toolbar, makeDom;
        $ = require("$-debug");
        makeDom = require("./dom-debug");
        return Toolbar = function() {
            function Toolbar(selector) {
                this.addMenu = __bind(this.addMenu, this);
                this.selector = selector;
                this.menus = {};
            }
            Toolbar.prototype.addMenu = function(id, menu) {
                var dom;
                if (!(id in this.menus)) {
                    dom = makeDom(menu);
                    this.menus[id] = dom;
                    $(this.selector).append(dom);
                } else {
                    dom = this.menus[id];
                }
                return dom;
            };
            Toolbar.prototype.removeAll = function() {
                return $(this.selector).remove();
            };
            Toolbar.prototype.removeMenu = function(id) {
                $(this.menus[id]).remove();
                return delete this.menus[id];
            };
            Toolbar.prototype.hideMenu = function(id) {
                return $(this.menus[id]).hide();
            };
            Toolbar.prototype.showMenu = function(id) {
                return $(this.menus[id]).show();
            };
            Toolbar.prototype.hideAllMenus = function() {
                var id, menu, _ref, _results;
                _ref = this.menus;
                _results = [];
                for (id in _ref) {
                    menu = _ref[id];
                    _results.push($(menu).hide());
                }
                return _results;
            };
            Toolbar.prototype.showAllMenus = function() {
                var id, menu, _ref, _results;
                _ref = this.menus;
                _results = [];
                for (id in _ref) {
                    menu = _ref[id];
                    _results.push($(menu).show());
                }
                return _results;
            };
            Toolbar.prototype.empty = function() {
                $(this.selector).empty();
                return this.menus = {};
            };
            return Toolbar;
        }();
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    define("taoblog/admin/1.0.0/dom-debug", [], function(require, exports, module) {
        var makeDom;
        return makeDom = function(tree) {
            var child, element, key, node, value, _i, _len, _ref;
            if (tree.length === 0) {
                return null;
            }
            if (tree[0] instanceof HTMLElement) {
                element = tree[0];
            } else {
                element = document.createElement(tree[0]);
            }
            _ref = tree.slice(1);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                node = _ref[_i];
                if (toString.call(node) === "[object String]") {
                    element.appendChild(document.createTextNode(node));
                } else if (node instanceof Text) {
                    element.appendChild(node);
                } else if (Array.isArray(node)) {
                    child = makeDom(node);
                    if (child != null) {
                        element.appendChild(child);
                    }
                } else if (node instanceof Attr) {
                    element.setAttributeNode(node);
                } else if (node === Object(node)) {
                    for (key in node) {
                        value = node[key];
                        element.setAttribute(key, value);
                    }
                }
            }
            return element;
        };
    });
}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
    define("taoblog/admin/1.0.0/utils-debug", [ "$-debug", "./dom-debug" ], function(require, exports, module) {
        var $, dom, flash, getTimeAgo, truncate;
        $ = require("$-debug");
        dom = require("./dom-debug");
        getTimeAgo = function(date) {
            var days, hours, mins, now, secs;
            now = new Date();
            secs = Math.floor((now - date) / 1e3);
            if (secs === 0) {
                return "just now";
            }
            mins = Math.floor(secs / 60);
            if (mins === 0) {
                return "" + secs + " " + (secs === 1 ? "second" : "seconds") + " ago";
            }
            hours = Math.floor(mins / 60);
            if (hours === 0) {
                return "" + mins + " " + (mins === 1 ? "minute" : "minutes") + " ago";
            }
            days = Math.floor(hours / 24);
            if (days === 0) {
                return "" + hours + " " + (hours === 1 ? "hour" : "hours") + " ago";
            } else if (days > 30) {
                return date.toDateString();
            } else {
                return "" + days + " " + (days === 1 ? "day" : "days") + " ago";
            }
        };
        truncate = function(text, length, killwords, end) {
            var index, whitespace, _i, _ref, _ref1;
            if (length == null) {
                length = 255;
            }
            if (killwords == null) {
                killwords = false;
            }
            if (end == null) {
                end = "...";
            }
            console.log(text);
            if (text.length <= length) {
                return text;
            }
            if (killwords) {
                return text.slice(0, +(length - 1) + 1 || 9e9) + end;
            }
            for (index = _i = length, _ref = length / 2; length <= _ref ? _i <= _ref : _i >= _ref; index = length <= _ref ? ++_i : --_i) {
                if ((_ref1 = text[index]) === "\n" || _ref1 === "	" || _ref1 === " ") {
                    whitespace = true;
                } else if (whitespace) {
                    return text.slice(0, +(index - 1) + 1 || 9e9) + end;
                }
            }
            return text.slice(0, +(index - 1) + 1 || 9e9) + end;
        };
        flash = function(message, category) {
            var item;
            if (category == null) {
                category = "success";
            }
            item = dom([ "p", {
                "class": category
            }, message ]);
            $("#flash").append(item);
            $(item).hide();
            return $(item).fadeIn("fast").delay(category === "success" ? 3e3 : 6e3).fadeOut("slow", function() {
                return $(this).remove();
            });
        };
        return {
            getTimeAgo: getTimeAgo,
            truncate: truncate,
            flash: flash
        };
    });
}).call(this);
