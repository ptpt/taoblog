// Generated by CoffeeScript 1.6.3
(function() {
  var deps,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  deps = ['jquery', 'Uri', 'moment', 'admin/browser', 'admin/toolbar', 'admin/dom', 'admin/utils'];

  requirejs(deps, function($, Uri, moment, Browser, Toolbar, dom, Utils) {
    var DRAFT_IMG_SRC, PRIVATE, PRIVATE_IMG_SRC, PUBLIC, PostBrowser, TRASH, setupPosts, _ref;
    PUBLIC = 0;
    PRIVATE = 1;
    TRASH = 2;
    PRIVATE_IMG_SRC = '/static/img/eye-blocked.png';
    DRAFT_IMG_SRC = '/static/img/pencil3.png';
    PostBrowser = (function(_super) {
      __extends(PostBrowser, _super);

      function PostBrowser() {
        _ref = PostBrowser.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      PostBrowser.prototype.showDate = function() {
        var now;
        now = new Date();
        return $(this.items).find('TD.date > time').each(function() {
          var date;
          date = moment($(this).attr('datetime'), 'YYYY-MM-DD HH:mm:ssZ');
          return $(this).text(date.fromNow());
        });
      };

      PostBrowser.prototype.makePostItem = function(post) {
        var draftIcon, statusIcon;
        draftIcon = post.draft ? [
          'img', {
            "class": 'draft',
            src: DRAFT_IMG_SRC
          }
        ] : null;
        statusIcon = post.status === PRIVATE ? [
          'img', {
            "class": 'private',
            src: PRIVATE_IMG_SRC
          }
        ] : null;
        return dom([
          'tr', {
            "class": "item",
            'data-id': post.id,
            'data-status': post.status
          }, [
            'td', {
              "class": 'title'
            }, Utils.truncate(post.title, 64), draftIcon, statusIcon
          ], [
            'td', {
              "class": 'tags'
            }, post.tags.join(',')
          ], [
            'td', {
              "class": 'date'
            }, [
              'time', {
                datetime: post.created_at + 'Z'
              }, moment(post.created_at, 'YYYY-MM-DD HH:mm:ssZ').fromNow()
            ]
          ]
        ]);
      };

      PostBrowser.prototype.setPosts = function(posts) {
        var post, _i, _len;
        this.tbody.empty();
        for (_i = 0, _len = posts.length; _i < _len; _i++) {
          post = posts[_i];
          this.tbody.append(this.makePostItem(post));
        }
        return this.reload();
      };

      PostBrowser.prototype.appendPosts = function(posts) {
        var post, _i, _len;
        for (_i = 0, _len = posts.length; _i < _len; _i++) {
          post = posts[_i];
          this.tbody.append(this.makePostItem(post));
        }
        return this.reload();
      };

      PostBrowser.prototype.removeSelections = function(callback) {
        var browser, length, removedCount;
        removedCount = 0;
        length = this.getSelections().length;
        browser = this;
        return this.getSelections().fadeOut('fast', function() {
          $(this).remove();
          removedCount++;
          if (removedCount >= length) {
            browser.reload();
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      };

      PostBrowser.prototype.removeAll = function(callback) {
        var browser, length, removedCount;
        removedCount = 0;
        length = this.items.length;
        browser = this;
        return this.items.fadeOut('fast', function() {
          $(this).remove();
          removedCount++;
          if (removedCount >= length) {
            browser.reload();
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      };

      PostBrowser.prototype.markSelectedPostsAs = function(status) {
        var img, item, postItems, _i, _len, _results;
        postItems = this.getSelections();
        if (status === 'private') {
          postItems.data('status', PRIVATE);
        } else if (status === 'public') {
          postItems.data('status', PUBLIC);
        } else if (status === 'trash') {
          postItems.data('status', TRASH);
        }
        _results = [];
        for (_i = 0, _len = postItems.length; _i < _len; _i++) {
          item = postItems[_i];
          img = $(item).find('TD.title > IMG.private');
          if (status === 'private') {
            if (img.length === 0) {
              _results.push($(item).children('TD.title').append(dom([
                'img', {
                  "class": 'private',
                  src: PRIVATE_IMG_SRC
                }
              ])));
            } else {
              _results.push(void 0);
            }
          } else if (status === 'public') {
            if (img.length > 0) {
              _results.push(img.remove());
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      PostBrowser.prototype.countSelectionsByStatus = function() {
        var item, privateItems, publicItems, trashItems, _i, _len, _ref1;
        publicItems = [];
        privateItems = [];
        trashItems = [];
        _ref1 = this.getSelections();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          if ($(item).data('status') === PUBLIC) {
            publicItems.push(item);
          } else if ($(item).data('status') === PRIVATE) {
            privateItems.push(item);
          } else if ($(item).data('status') === TRASH) {
            trashItems.push(item);
          }
        }
        return [publicItems, privateItems, trashItems];
      };

      return PostBrowser;

    })(Browser);
    setupPosts = function() {
      var browser, clearTrash, complementBrowser, deleteSelectedPosts, getApiPath, markSelectedPostsAs, showToolbar, toolbar;
      toolbar = new Toolbar('#toolbar');
      browser = new PostBrowser('TABLE.browser');
      getApiPath = function(offset, limit, currentStatus) {
        var uri;
        if (currentStatus == null) {
          currentStatus = $(browser.selector).data('status');
        }
        uri = new Uri(window.location.href);
        if (offset != null) {
          uri.addQueryParam('offset', encodeURIComponent(offset));
        }
        if (limit != null) {
          uri.addQueryParam('limit', encodeURIComponent(limit));
        }
        if (currentStatus != null) {
          uri.addQueryParam('status', encodeURIComponent(currentStatus));
        }
        uri.addQueryParam('meta', true);
        return "/api/posts/" + (uri.query());
      };
      clearTrash = function() {
        return $.ajax({
          url: '/api/posts/?status=trash',
          type: 'DELETE',
          success: function(data) {
            return browser.removeAll(function() {
              return Utils.flash("" + data.response.total_posts + " " + (data.response.total_posts === 1 ? 'post' : 'posts') + " got deleted");
            });
          },
          error: function() {
            showToolbar();
            return Utils.flash('failed to clear trash', 'error');
          }
        });
      };
      complementBrowser = function(currentStatus) {
        var limit, offset;
        limit = browser.getSelections().length;
        offset = browser.items.length - limit;
        return $.get(getApiPath(offset, limit, currentStatus), function(data) {
          return browser.removeSelections(function() {
            showToolbar();
            browser.appendPosts(data.response.posts);
            if (!data.response.more) {
              return $('#more-posts').hide();
            }
          });
        }).error(function(data, text) {
          browser.clearSelections();
          showToolbar();
          return Utils.flash('failed to get new posts', 'error');
        });
      };
      deleteSelectedPosts = function(currentStatus) {
        var item, selections;
        selections = browser.getSelections();
        return $.ajax({
          url: '/api/posts/?bulk=' + encodeURIComponent(((function() {
            var _i, _len, _ref1, _results;
            _ref1 = browser.getSelections();
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              item = _ref1[_i];
              _results.push($(item).data('id'));
            }
            return _results;
          })()).join(',')),
          type: 'DELETE',
          success: function(data) {
            Utils.flash("" + selections.length + " " + (selections.length === 1 ? 'post' : 'posts') + " has been deleted");
            return complementBrowser(currentStatus);
          },
          error: function() {
            browser.clearSelections();
            showToolbar();
            return Utils.flash('failed to delete selected posts', 'error');
          }
        });
      };
      markSelectedPostsAs = function(currentStatus, status) {
        var action, item, passiveAction, selections;
        selections = browser.getSelections();
        if (!selections.length) {
          return;
        }
        if (status === 'public') {
          action = 'publish';
          passiveAction = 'published';
        } else if (status === 'private') {
          action = 'hide';
          passiveAction = 'hidden';
        } else if (status === 'trash') {
          action = 'trash';
          passiveAction = 'trashed';
        }
        return $.post("/api/posts/" + action, {
          id: ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = selections.length; _i < _len; _i++) {
              item = selections[_i];
              _results.push($(item).data('id'));
            }
            return _results;
          })()).join(',')
        }, function() {
          if (currentStatus === 'trash' || status === 'trash') {
            Utils.flash("" + selections.length + " " + (selections.length === 1 ? 'post' : 'posts') + " has been " + passiveAction);
            return complementBrowser(currentStatus);
          } else {
            Utils.flash("" + selections.length + " " + (selections.length === 1 ? 'post' : 'posts') + " has been " + passiveAction);
            browser.markSelectedPostsAs(status);
            return showToolbar();
          }
        }).error(function(data) {
          browser.clearSelections();
          return Utils.flash('failed to #{ action } selected posts', 'error');
        });
      };
      browser.bind('click', function() {
        return showToolbar();
      });
      browser.bind('dblclick', function() {
        return window.location = "/post/" + ($(this).data('id')) + "/edit";
      });
      showToolbar = function() {
        var currentStatus, item, privateCount, publicCount, trashCount, _ref1;
        currentStatus = $(browser.selector).data('status');
        toolbar.hideAllMenus();
        toolbar.showMenu('new-post');
        _ref1 = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = browser.countSelectionsByStatus();
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            _results.push(item.length);
          }
          return _results;
        })(), publicCount = _ref1[0], privateCount = _ref1[1], trashCount = _ref1[2];
        if (publicCount + privateCount === 1) {
          toolbar.showMenu('edit');
        } else {
          toolbar.hideMenu('edit');
        }
        if (publicCount > 0 || privateCount > 0) {
          toolbar.showMenu('trash');
        } else {
          toolbar.hideMenu('trash');
        }
        if (publicCount > 0 || trashCount > 0) {
          toolbar.showMenu('hide');
        } else {
          toolbar.hideMenu('hide');
        }
        if (privateCount > 0 || trashCount > 0) {
          toolbar.showMenu('publish');
        } else {
          toolbar.hideMenu('publish');
        }
        if (trashCount > 0) {
          toolbar.showMenu('delete');
          return toolbar.hideMenu('delete-all');
        } else {
          toolbar.hideMenu('delete');
          if (currentStatus === 'trash') {
            return toolbar.showMenu('delete-all');
          }
        }
      };
      $('html').click(function(e) {
        if (browser.items.find(e.target).length === 0 && $(toolbar.selector).find(e.target).length === 0) {
          browser.clearSelections();
          return showToolbar();
        }
      });
      $('#more-posts').click(function(event) {
        var offset, path;
        event.preventDefault();
        offset = browser.items.length;
        path = getApiPath(offset);
        return $.get(path, function(data) {
          browser.appendPosts(data.response.posts);
          if (!data.response.more) {
            return $('#more-posts').hide();
          }
        }).error(function() {
          return Utils.flash('failed to get new posts', 'error');
        });
      });
      return (function() {
        var currentStatus, li;
        currentStatus = $(browser.selector).data('status');
        toolbar.addMenu('new-post', [
          'li', [
            'a', {
              href: '/admin/compose'
            }, 'New Post'
          ]
        ]);
        li = toolbar.addMenu('edit', [
          'li', [
            'a', {
              href: "#"
            }, 'Edit'
          ]
        ]);
        toolbar.hideMenu('edit');
        $('a', li).click(function(event) {
          var id;
          event.preventDefault();
          id = $(browser.getSelections()).data('id');
          return window.location = "/post/" + id + "/edit";
        });
        li = toolbar.addMenu('delete-all', [
          'li', [
            'a', {
              href: '#'
            }, 'Delete All'
          ]
        ]);
        toolbar.hideMenu('delete-all');
        $('a', li).click(function(event) {
          event.preventDefault();
          return clearTrash();
        });
        li = toolbar.addMenu('delete', [
          'li', [
            'a', {
              href: '#'
            }, 'Delete'
          ]
        ]);
        toolbar.hideMenu('delete');
        $('a', li).click(function(event) {
          event.preventDefault();
          return deleteSelectedPosts(currentStatus);
        });
        li = toolbar.addMenu('trash', [
          'li', [
            'a', {
              href: '#',
              'data-action': '/api/posts/trash'
            }, 'Trash'
          ]
        ]);
        toolbar.hideMenu('trash');
        $('a', li).click(function(event) {
          event.preventDefault();
          return markSelectedPostsAs(currentStatus, 'trash');
        });
        li = toolbar.addMenu('hide', [
          'li', [
            'a', {
              href: '#',
              'data-action': '/api/posts/hide'
            }, 'Hide'
          ]
        ]);
        toolbar.hideMenu('hide');
        $('a', li).click(function(event) {
          event.preventDefault();
          return markSelectedPostsAs(currentStatus, 'private');
        });
        li = toolbar.addMenu('publish', [
          'li', [
            'a', {
              href: '#',
              'data-action': '/api/posts/publish'
            }, 'Publish'
          ]
        ]);
        toolbar.hideMenu('publish');
        $('a', li).click(function(event) {
          event.preventDefault();
          return markSelectedPostsAs(currentStatus, 'public');
        });
        showToolbar();
        return browser.showDate();
      })();
    };
    return setupPosts();
  });

}).call(this);
