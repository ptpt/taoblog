// Generated by CoffeeScript 1.6.3
(function() {
  define(['jquery'], function($) {
    var Browser;
    return Browser = (function() {
      function Browser(selector) {
        var browser;
        browser = this;
        this.selectedClass = 'selected';
        this.tbody = $(selector).children('TBODY');
        this.items = this.tbody.children('TR.item');
        this.lastSelectedRow = 0;
        this.selector = selector;
        this.events = [];
        this.bind('click', function(event, row) {
          var r, _i, _ref;
          if (event.shiftKey) {
            for (r = _i = row, _ref = browser.lastSelectedRow; row <= _ref ? _i <= _ref : _i >= _ref; r = row <= _ref ? ++_i : --_i) {
              browser.select(r);
            }
          } else if (event.ctrlKey) {
            browser.toggleSelection(row);
          } else {
            browser.clearSelections();
            browser.select(row);
          }
          return browser.lastSelectedRow = row;
        });
      }

      Browser.prototype.select = function(row) {
        if (!this.isSelected(row)) {
          return this.items.eq(row).addClass(this.selectedClass);
        }
      };

      Browser.prototype.unselect = function(row) {
        if (this.isSelected(row)) {
          return this.items.eq(row).removeClass(this.selectedClass);
        }
      };

      Browser.prototype.clearSelections = function() {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.items.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.unselect(i));
        }
        return _results;
      };

      Browser.prototype.isSelected = function(row) {
        return this.items.eq(row).hasClass(this.selectedClass);
      };

      Browser.prototype.toggleSelection = function(row) {
        if (this.isSelected(row)) {
          return this.unselect(row);
        } else {
          return this.select(row);
        }
      };

      Browser.prototype.getSelections = function() {
        return this.items.filter('.' + this.selectedClass);
      };

      Browser.prototype.selectAll = function() {
        return this.items.addClass(selectedClass);
      };

      Browser.prototype.bind = function(type, handler) {
        this.events.push({
          type: type,
          handler: handler
        });
        return this.items.each(function(row) {
          return $(this).bind(type, function(event) {
            return handler.apply(this, [event, row]);
          });
        });
      };

      Browser.prototype.rebind = function() {
        var event, events, _i, _len, _results;
        events = this.events;
        this.events = [];
        _results = [];
        for (_i = 0, _len = events.length; _i < _len; _i++) {
          event = events[_i];
          _results.push(this.bind(event.type, event.handler));
        }
        return _results;
      };

      Browser.prototype.reload = function() {
        this.items = this.tbody.children('TR.item');
        this.lastSelectedRow = 0;
        this.items.unbind();
        return this.rebind();
      };

      return Browser;

    })();
  });

}).call(this);
